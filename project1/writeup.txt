
	Both PostgreSQL and MongoDB offer specific advantages and disadvantages for implementing the Bob's Pizza database. This project demonstrates the different value that different databases may bring to a project and how programmers should be careful to consider these factors before choosing a database. 

[What went well?] 

	The benefits provided by MongoDB were numerous. Perhaps the most evident advantage was the use of javascript as the primary language. Because javascript is so commonly used, it makes it much simpler to integrate functions, like taking orders, into the database itself. A secondary advantage is the use of subdocuments. While the project description did not explicitly call for subdocuments, using them for the names and addresses in the Users collection, made the database conceptually much easier to understand. Finally, MongoDB was very efficient with indexing. Not only does Mongo make it possible to index on any attribute, but the indexing process itself was very fast and substantially imporved query performance. 


[Insert Postgre advantages here]

[What didn't?] 

	In addition to the advantages of using MongoDB, there are also several disadvantages that must be considered. For example, it is generally considered positive that MongoDB is schemaless, but for the purposes of this assignment, collection organization was far more rigid than traditional Mongo databases. This nullified the value of a schemaless database like Mongo and necessitated extra work in adding schema validation or have more contolled insertions and updates.

	Secondarily, while having referenced collections in MongoDB made it easier to relate two separate collections to one another, the lack of joins in Mongo meant we had to complete a significant number of queries. For example, when comparing the amount of ingredients in inventory to the amount required in a recipe for an order, a find query had to be repeatedly called on the inventory collection. This is less flexible than would be possiblle with a join because a join could immediately build a table that associated the values in the two different databases. 

	Finally, the lack of transactions in Mongo harmed the performance of updating the collections by requiring that you confirm a 'transaction' could be completed before the 'transaction' begins. In the createOrder function this meant iterating through every ingredient to confirm its amount and then iterating through each ingredient again to update them once it was confirmed there was enough. Comparatively, with transactions updates could be made along the way and rolled back if any part of the transaction fails. 

[Insert Postgre disadvantages here]

[Are there features unique to one database or another that helped you (such as transactions in PostgreSQL, or nested collections in MongoDB)?] 

	The document-based organization and use of nested collections in MongoDB significantly helped with relating different collections to each other. The ability to use an array of objects was particularly helpful with the recipe collection, because it simplifies the process of associating multiple ingredients with their own quantity needs to a specific recipe. This then reduced the amount of information we had to handle because a single document could contain the information for the entire array of objects, rather than needing different tuples for every ingredient connected to a specific recipe. 	

[Insert unique feature(s) of postgre here]





