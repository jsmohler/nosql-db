HOW TO USE:

To execute this database in full, run the following 4 commands from the root of this folder:

	mongo pizza *the database name is irrelevant here but pizza is intuitive to the purpose 	of the database
	load('create_collections.js');
	load('server_side.js');
	load('loadData.js');

The database may then be interacted with using the createOrder, restock, and throwOut functions or traditional mongo commands. 


FILE DESCRIPTION:

This implementation of a mongo database for Bob's Pizza includes the following files:

(1) DataCreator.java- Generates four load scripts containing either insert lines of calls to a function that will load 1000 users, 25 recipes, and 50000 orders into the database.

(2) create_collections.js- Builds the users, recipes, inventory, and orders collections with Schema Validation that was introduced with MongoDB 3. Since MongoDB is schemaless by nature, it becomes difficult to enforce the organization defined in the assignment. Using SchemaValidation in this way then allows us to strictly adhere to that organization by defining the collections and validation rules in advance, rather than just creating the collections via insertion. 

(3) server_side.js- Contains 3 server-side functions. The latter two functions make it easy to update the inventory collection to test the effectiveness of the createOrder function.
	a. The first function createOrder(user, recipe) takes in user and recipe ids as parameters and then will create a new document in the order database and decrement the number of ingredients in inventory by the amount required for the specified recipe. This method will throw errors if the user or recipe does not exist or if there aren't enough ingredients to fulfill the order.
	b. The restock(name, quantity) function takes in the name of an ingredient in inventory and a quantity and will increase the quantity of the ingredient inventory by the specified amount. This method will throw an exception if there is no ingredient with that name in inventory.

	c. The throwOut(name, quantity) function takes in the name of an ingredient in inventory and a quantity and will decrease the quantity of the ingredient inventory by the specified amount. This method will throw an exception if there is no ingredient with that name in inventory or if the given quantity exceeds the amount currently in inventory.


(4) loadData.js- Calls the load scripts created by DataCreator.java to load all of the data in at once. The 4 load files called are loadUsers.js, loadRecipes.js, loadIngredients.js, and loadOrders.js. The first three files contain a list of insert statements, while the loadOrders.js file calls db.loadServerScripts() and executes the createOrder function defined in server_side.js.

(5) userDetials.csv- User data generated from Mockaroo.com to be used to build data in DataCreator.java

(6) explainBefore.js- Contains a full report of running the explain function on querying the orders collection for all 25 recipes by recipe id before indexing was added on the recipe ids.
 
(7) explainAfter.js- Contains a full report of running the explain function on querying the orders collection for all 25 recipes by recipe id after indexing was added on the recipe ids.

(8) comparison.txt- Compares the effect of indexing on the performance of queries. 

All other files provided in this folder were generated by the DataGenerator.java program.






