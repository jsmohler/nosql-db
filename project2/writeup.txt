Victoria Fernalld & Jordan Mohler
NoSQL Databases
Project 2 Writeup


	The design process for Postgre went very well.  Especially after completing Project 1 and builidng out a schema structure for mulitple many-to-may relationships, constructing a similar schema design for the hospital system was quite easy.  We chose to represent relationships in separate tables that essentially "mapped" each relationship (whether between doctor and patient, or patient, illness, and treatment).  While this design is not quite as natural as Neo4j allows for, the mapping tables were very easy to query in a logical way.  

	Additionally, since Postgre supports SQL, we found database creation, data loading, and querying to be incredibly simple and straightforward.  Additionally, given the guarantee of atomicity with Postgre we felt very confident in the accuracy of all data imports.  Finally, we felt that Postgre very efficiently handled the significant number of records that we needed to insert, store, and query.  Additionally, Postgre so deftly supports all database functions through the \include <document> command.  We were able to drop, re-create, and load data into the database in under a minute as we just loaded a single SQL file!  Had we needed to "prototype" our database a bit more with shifting design requirements, this would not have been a problem.  

	Similarly to Postgre, the design process also went very well for neo4j. Because neo4j is a graph database, it made it very easy to design relationships between nodes. This made it incredibly simple to represent the structure of the SmallTown Hospital database. Additionally, because neo4j has both the neo4j-shell and the browser interface, it was very easy to interact with the data once it was loaded into the database. Finally, queries in neo4j were incredibly fast because of the relationship-based nature of the database, which was a big advantage when running queries and completing the extra credit questions. 

	Quite honestly, we did not experience any major inconveniences in implementing the hospital database with Postgre.  One consideration, however, would be in a scenario in which this design shifted from "Smalltown Hospital" to a larger scale system with significantly more records to store.  The design we implemented using "mapping tables" to represent relationships is certainly not the most storage / space effecient option.  If storage space were a limitation in a bigger scale hospital system, Postgre might not be the best option considering the limitations in representing many-to-many relationships.  

	We also did not have many difficulties using neo4j. Because Cypher is a bit different from other database languages, it was a bit more difficult to understand at first, but after sufficient practice, it became simple to use. Additionally, while it is a benefit that neo4j stores highly variable data, this did require a little bit more thought into how to symbolize and interact with the multiple attributes that nodes and relationships may have, but this was easily made up for with the ease of displaying many-to-many relationships. 

	One of the primary features and conveniences of Postgre continues to be its support of SQL.  SQL is such a straightforward syntax and logical query language that provides an immense breadth of query options.  After having worked with SQL a handful of times, crafting a single query to get a patient's personal information as well as doctor, illness, and treatment details was a breeze and took less than two minutes! Secondarily, the foundation of set theory in Postgre allows for incredible flexibility in joining, unioning, and manipulating data -- all as built in features of this relational database.  

	While neo4j doesn't have the advantage of using a straightforward language like SQL, it's relationship-based nature as a graph database was a big advantage with completing this project. This is particularly true because of the complex nature of having tens-of-thousands of relationships. Not only was did neo4j make it easy to store a large amount of data, but because like nodes are only 1 step away, this significantly simplified the necessary queries. 








