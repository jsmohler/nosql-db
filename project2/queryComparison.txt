Yes, in Postgre it is possible to do a single query and get a patient's information, their doctor(s), illness(es), and treatment(s).  

//Postgre queries:
SELECT * FROM patients, doctors, pdmap, pitmap
WHERE patients.patientID = '124' 
AND pdmap.patientID = '124'
AND pitmap.patientID = '124'
AND doctors.doctorID = pdmap.doctorID;

SELECT * FROM patients, doctors, pdmap, pitmap
WHERE patients.patientID = '222' 
AND pdmap.patientID = '222'
AND pitmap.patientID = '222'
AND doctors.doctorID = pdmap.doctorID;

SELECT * FROM patients, doctors, pdmap, pitmap
WHERE patients.fname = 'Caroline'
AND patients.lname = 'Fernalld' 
AND pdmap.patientID = patients.patientID
AND pitmap.patientID = patients.patientID
AND doctors.doctorID = pdmap.doctorID;



//Neo4j queries:

Queries:

(1) 	MATCH (p:Patient {name:"Patient10"})-[r]->(m) 
	RETURN p as patient, type(r) as relationship, m.name as name
(2)	MATCH (p:Patient {name:"Patient10"})-[r:sees]->(d:Doctor)
	RETURN p as patient, type(r) as relationship, d.name as doctor
(3)	MATCH (p:Patient {name:"Patient10"})-[r:has]->(i:Illness)
	RETURN p as patient, type(r) as relationship, i.name as illness
(4) 	MATCH (p:Patient {name:"Patient10"})-[r:receives]->(t:Treatment)
	RETURN p as patient, type(r) as relationship, t.name as treatment

Is it possible to return all of this information in one query, or are multiple requires required?

Yes, it is possible. You can return all the doctors, illnesses, and treatments for a single patient by using the first query listed. For example, that query returns:

╒════════════════════╤══════════════╤══════════════╕
│"patient"           │"relationship"│"name"        │
╞════════════════════╪══════════════╪══════════════╡
│{"name":"Patient10"}│"receives"    │"Treatment156"│
├────────────────────┼──────────────┼──────────────┤
│{"name":"Patient10"}│"has"         │"Illness871"  │
├────────────────────┼──────────────┼──────────────┤
│{"name":"Patient10"}│"has"         │"Illness387"  │
├────────────────────┼──────────────┼──────────────┤
│{"name":"Patient10"}│"has"         │"Illness475"  │
├────────────────────┼──────────────┼──────────────┤
│{"name":"Patient10"}│"sees"        │"Doctor85"    │
├────────────────────┼──────────────┼──────────────┤
│{"name":"Patient10"}│"sees"        │"Doctor58"    │
├────────────────────┼──────────────┼──────────────┤
│{"name":"Patient10"}│"sees"        │"Doctor10"    │
└────────────────────┴──────────────┴──────────────┘

It is important to note that the queries above use Patient10 as an example, but this could be substituted for any patient name. Alternatively, to get a doctor who is also a patient and all their relationships, the following query may be used:

	MATCH (d:Doctor {is_patient: "yes"})-[r]->(m) 
	RETURN d.name as patient, type(r) as relationship, m.name as name

Then the latter three queries return a patient's doctors, a patient's illnesses, and a patient's treatments respectively. However, what is not possible is to return the doctors, treatments, and illnesses for all patients at a single time. At most, 1000 rows can be displayed at once from the queries "MATCH (n) RETURN n" and "MATCH (p:Patient)-[r]->(m) RETURN p, type(r), m".


